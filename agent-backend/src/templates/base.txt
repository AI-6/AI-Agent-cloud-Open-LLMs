import autogen
from autogen import AssistantAgent, GroupChat, GroupChatManager, UserProxyAgent
from init.env_variables import SOCKET_URL, BASE_PATH
from socketio.simple_client import SimpleClient

session_id = f"{{session_id}}"

socket = SimpleClient()
socket.connect(url=SOCKET_URL)
socket.emit("join_room", f"_{session_id}")

config_list = autogen.config_list_from_json(
        f"{BASE_PATH}/config/OAI_CONFIG_LIST.json",
        filter_dict={
            "model": {
                "gpt-4",
            }
        }
    )

gpt4_config = {
    "seed": {{ gpt4_config.seed }},
    "temperature": {{ gpt4_config.temperature }},
    "request_timeout": {{ gpt4_config.request_timeout }},
    "retry_wait_time": {{ gpt4_config.retry_wait_time }},
    "config_list": config_list,
}

{% for role in roles %}
{% if role.is_user_proxy %}
user_proxy = UserProxyAgent(
    name="Admin",
    llm_config=gpt4_config,
    system_message="{{ role.system_message }}",
    human_input_mode="{{ role.human_input_mode }}",
    code_execution_config={{ role.code_execution_config | default(False) }},
    use_sockets=True,
    socket_client=socket,
    sid=session_id
)
{% else %}
{{ role.name|format_role_name }} = {{ role.type }}(
    name="{{ role.name|format_role_name }}",
    llm_config=gpt4_config,
    system_message="{{ role.system_message }}",
    human_input_mode="{{ role.human_input_mode }}",
    code_execution_config={{ role.code_execution_config| default(False) }},
    use_sockets=True,
    socket_client=socket,
    sid=session_id
)
{% endif %}
{% endfor %}

{% if group_chat %}
groupchat = GroupChat(agents=[user_proxy{% for role in roles %}{% if not role.is_user_proxy %}, {{ role.name|format_role_name }}{% endif %}{% endfor %}], messages=[], max_round=50)
manager = GroupChatManager(
            groupchat=groupchat,
            llm_config=gpt4_config,
            use_sockets=True,
            socket_client=socket,
            sid=session_id)
{% endif %}